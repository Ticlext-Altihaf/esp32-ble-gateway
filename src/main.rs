use std::borrow::Borrow;

use anyhow::{bail, Result};
use esp_idf_hal::gpio::PinDriver;
use esp_idf_svc::hal::prelude::Peripherals;
use esp_idf_svc::nvs::EspNvs;
use log::info;
use embedded_svc::wifi::{AuthMethod, ClientConfiguration, Configuration};


use esp_idf_svc::hal::task::block_on;
use esp_idf_svc::log::EspLogger;
use esp_idf_svc::timer::EspTaskTimerService;
use esp_idf_svc::wifi::{AsyncWifi, EspWifi};
use esp_idf_svc::{eventloop::EspSystemEventLoop, nvs::EspDefaultNvsPartition};

use uuid::Uuid;



/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("Wokwi-GUEST")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

/// Entry point to our application.
///
/// It sets up a Wi-Fi connection to the Access Point given in the
/// configuration, then blinks the RGB LED green/blue.
///
/// If the LED goes solid red, then it was unable to connect to your Wi-Fi
/// network.
fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sys_loop = EspSystemEventLoop::take()?;
    let timer_service = EspTaskTimerService::new()?;
    let nvs_partition = EspDefaultNvsPartition::take()?;


    // get uuid or make one
    let nvs_namespace = "main";
    let mut nvs = match EspNvs::new(nvs_partition.clone(), nvs_namespace, true) {
        Ok(nvs) => {
            info!("Got namespace {:?} from default partition", nvs_namespace);
            nvs
        }
        Err(e) => panic!("Could't get namespace {:?}", e),
    };

    let mut buffer_uuid = [0u8; 36];
    let uuid = match nvs.get_str("uuid", &mut buffer_uuid) {
        Ok(uuid) => {
            info!("Got uuid from nvs: {:?}", uuid);
            uuid
        }
        Err(e) => {
            panic!("Couldn't get uuid from nvs: {:?}", e);
        }
    };

    if uuid.is_none() {
        let new_uuid = Uuid::new_v4();
        let new_uuid_str = new_uuid.to_string();
        info!("Generated new uuid: {:?}", new_uuid_str);
        let res = nvs.set_str("uuid", new_uuid_str.as_str());
        if res.is_err() {
            panic!("Couldn't set uuid in nvs: {:?}", res);
        }
    }

    let uuid = nvs.get_str("uuid", &mut buffer_uuid).unwrap().unwrap();
    info!("Got uuid from nvs: {:?}", uuid);






    info!("Hello, world!");

    // Start the LED
    let mut led_blue = PinDriver::output(peripherals.pins.gpio2)?;
    led_blue.set_high();


    


    let mut wifi = AsyncWifi::wrap(
        EspWifi::new(peripherals.modem, sys_loop.clone(), Some(nvs_partition))?,
        sys_loop,
        timer_service,
    )?;

    let mut res = block_on(connect_wifi(&mut wifi));
    while let Err(e) = res {
        log::error!("Failed to connect to wifi: {:?}", e);
        log::info!("Retrying in 5 seconds...");
        let current_time = std::time::Instant::now();
        //go blinking red
        loop {
            led_blue.set_low();
            // Wait...
            std::thread::sleep(std::time::Duration::from_millis(200));
            led_blue.set_high();
            // Wait...
            std::thread::sleep(std::time::Duration::from_millis(200));
            // check if 5 seconds have passed
            if current_time.elapsed().as_secs() >= 5 {
                break;
            }
        }
        res = block_on(connect_wifi(&mut wifi));
    }

    

    let ip_info = wifi.wifi().sta_netif().get_ip_info()?;

    info!("Wifi DHCP info: {:?}", ip_info);

    

    std::thread::sleep(core::time::Duration::from_secs(5));

    

    loop {
        led_blue.set_low();
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));


        led_blue.set_high();
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
    }
}


async fn connect_wifi(wifi: &mut AsyncWifi<EspWifi<'static>>) -> anyhow::Result<()> {
    // The constant `CONFIG` is auto-generated by `toml_config`.
    
    let app_config = CONFIG;
    let auth_method = if app_config.wifi_psk.is_empty() {
        AuthMethod::None
    } else {
        AuthMethod::WPA2Personal
    };
    info!("Connecting to wifi: {:?} with auth method: {:?}", app_config.wifi_ssid, auth_method);
    let wifi_configuration: Configuration = Configuration::Client(ClientConfiguration {
        ssid: app_config.wifi_ssid.try_into().unwrap(),
        bssid: None,
        auth_method: auth_method,
        password: app_config.wifi_psk.try_into().unwrap(),
        channel: None,
        ..Default::default()
    });

    wifi.set_configuration(&wifi_configuration)?;

    wifi.start().await?;
    info!("Wifi started");

    wifi.connect().await?;
    info!("Wifi connected");

    wifi.wait_netif_up().await?;
    info!("Wifi netif up");

    Ok(())
}